var fs = require('fs');
var WebSocket = require('ws');

// Load the certificate for the TLS connection which is automatically
// generated by btcd when it starts the RPC server and doesn't already
// have one.
var cert = fs.readFileSync('rpc.cert');
var ln_cert = fs.readFileSync('tls.cert');
var user = "caffeinum";
var password = "aspirine";
var ln_url = "wss://localhost:8001/ws";
var url = "wss://127.0.0.1:18556/ws";
var test_url = "wss://echo.websocket.org";

// Initiate the websocket connection.  The btcd generated certificate acts as
// its own certificate authority, so it needs to be specified in the 'ca' array
// for the certificate to properly validate.
var ws = new WebSocket(url, {
  headers: {
    'Authorization': 'Basic '+new Buffer(user+':'+password).toString('base64')
  },
  cert: cert,
  ca: [cert]
});
ws.on('open', function() {
    console.log('CONNECTED');
    // Send a JSON-RPC command to be notified when blocks are connected and
    // disconnected from the chain.
    // ws.send('{"jsonrpc":"1.0","id":"0","method":"notifyblocks","params":[]}');

    var method = "signmessage"
    var req = {
        id: "0",
        jsonrpc: "1.0",
        method: method,
        params: []
    }

    ws.send(JSON.stringify(req));
//    ws.send('{"jsonrpc":"1.0","id":"0","method":"","params":[]}');
});
ws.on('message', function(data, flags) {
    console.log('RESPONSE:')
    console.log(data);
});
ws.on('error', function(derp) {
  console.log('ERROR:',derp);
})
ws.on('close', function(data) {
  console.log('DISCONNECTED');
})

